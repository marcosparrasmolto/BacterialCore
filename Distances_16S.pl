#!/usr/bin/perl

use strict;
use List::Util qw( min max ); #This block of libraries are required to calculate the statics for the mean, min, sd and max
use Statistics::Basic qw(:all);
use Statistics::Descriptive;
use Math::NumberCruncher;

my $node;
my $leaves;
my @list_leaves;
my $band=1;
my @distancias=undef;
my $path=$ARGV[0];

open(arch,$path."results.txt")|| die; #We open the results file from tree to get get the info of all leaves in each node.
open(salida,">".$path."results_stats.txt"); #The output file is called this way
print salida "Node"."\t"."Leaves"."\t"."Mean"."\t"."Desv"."\t"."Max"."\n";

while(<arch>)
{
	chomp $_;
	
	$node=(split(/\t/,$_))[0];
	$leaves=(split(/\t/,$_))[8];
	
	print $node."\t".$leaves."\n";
	
	@list_leaves=split(/;/,$leaves); #We get an array of all leaves names of each node
	
	if(scalar(@list_leaves)>1) 
	{
		foreach my $item (@list_leaves) #For each node, we grep each leaf name from the original 97_rep_aligment sequences from greengenes
		{
			if($band==1)
			{
				system("grep '>$item' -A 1 -w 97_otus.fasta > ".$path."otus_test_file.fasta"); #97_otus from greengenes.
				$band=2;
			}else
			{
				system("grep '>$item' -A 1 -w 97_otus.fasta >> ".$path."otus_test_file.fasta");
			}
		}
		
		system("mothur '#filter.seqs(fasta=".$path."otus_test_file.fasta,vertical=T)'"); #Once we have subsampled all the leaves for a node, we calculate all the pairwise distances between each leaf.
		system("mothur '#dist.seqs(fasta=".$path."otus_test_file.filter.fasta, calc=onegap)'");
	
		open(distancias,$path."otus_test_file.filter.dist"); #This is the output file containing all the pairwise combinations and their distances
		
		while(<distancias>) #We get a list of all the distance values
		{
			chomp $_;
			
			my $valor=(split(/ /,$_))[2];
			
			push @distancias, $valor;
		}
		
		close(distancias);
		
		my $max = max @distancias; #Calculate the max, mean and standard deviation here
		my $mean = Math::NumberCruncher::Mean(\@distancias);
		my $sd = Math::NumberCruncher::StandardDeviation(\@distancias);

		print salida $node."\t".scalar(@list_leaves)."\t".$mean."\t".$sd."\t".$max."\n"; #Finally we print the info for each node
		
		$band=1;
		@distancias=undef;
		system("rm -rf ".$path."otus_test_file.fasta ".$path."otus_test_file.filter ".$path."otus_test_file.filter.dist ".$path."otus_test_file.filter.fasta"); #Here we remove the temporal files generated by mothur
				
	}elsif($node ne "Core")
	{
		print salida $node."\t".scalar(@list_leaves)."\t"."0"."\t"."0"."\t"."0"."\n"; #If a core is a leaf not a core, the result is 0 for all the variables
	}
}

close(salida);
system("rm -rf ".$path."otus_test_file.fasta ".$path."otus_test_file.filter ".$path."otus_test_file.filter.dist ".$path."otus_test_file.filter.fasta");